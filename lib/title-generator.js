/**
 * Unified Title Generator Service (JavaScript version for Node.js)
 * Handles both voice and text inputs using Gemini LLM as primary
 */

const { GoogleGenerativeAI } = require('@google/generative-ai');

const genAI = new GoogleGenerativeAI(process.env.NEXT_PUBLIC_GEMINI_API_KEY || process.env.GEMINI_API_KEY || '');

/**
 * Validates if a generated title meets quality standards
 */
function validateTitle(title) {
  if (!title || typeof title !== 'string') return false;
  
  const trimmed = title.trim();
  
  // Basic validation
  if (trimmed.length < 3 || trimmed.length > 60) return false;
  if (trimmed.split(' ').length > 8) return false;
  
  // Check for meaningful content (not just stop words)
  const words = trimmed.toLowerCase().split(' ');
  const stopWords = ['the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by'];
  const meaningfulWords = words.filter(word => !stopWords.includes(word));
  
  return meaningfulWords.length >= 1;
}

/**
 * Determines if a title should be generated based on current title
 * STRICT RULE: Only generate for generic/default titles, NEVER update existing titles
 */
function shouldGenerateTitle(currentTitle, messageCount) {
  if (!currentTitle || currentTitle.trim() === '') return true;
  
  // List of generic/default titles that should be replaced
  const genericTitles = [
    'New Chat',
    'New Conversation', 
    'Business Strategy Discussion',
    'Chat Session',
    'Conversation',
    'Untitled Chat',
    'Chat',
    'New'
  ];
  
  const trimmedTitle = currentTitle.trim();
  
  // STRICT RULE: If title is NOT in the generic list, NEVER regenerate
  // This means once ANY custom title is set, it's locked forever
  const isGenericTitle = genericTitles.includes(trimmedTitle);
  
  if (!isGenericTitle) {
    console.log(`üîí [TITLE-LOCK] Title "${trimmedTitle}" is custom - locked from auto-generation`);
    return false;
  }
  
  console.log(`‚úÖ [TITLE-GEN] Title "${trimmedTitle}" is generic - can be generated`);
  return true;
}

/**
 * Creates an optimized prompt for title generation based on input type
 */
function createTitlePrompt(options) {
  const { userMessage, assistantResponse, inputType } = options;
  
  const basePrompt = `Generate a concise, descriptive title (3-6 words) for a ${inputType} conversation based on this exchange:

User: "${userMessage}"
${assistantResponse ? `Assistant: "${assistantResponse.substring(0, 200)}..."` : ''}

Requirements:
- Maximum 6 words
- Descriptive and specific to the topic
- No quotation marks or special characters
- Professional tone
- Focus on the main subject/question
- Capitalize appropriately

Title:`;

  return basePrompt;
}

/**
 * Generates a title using Gemini LLM
 */
async function generateWithGemini(options) {
  try {
    const model = genAI.getGenerativeModel({
      model: 'gemini-1.5-flash',
      generationConfig: {
        temperature: options.temperature || 0.3,
        maxOutputTokens: 20,
        topK: 1,
        topP: 0.8,
      },
    });

    const prompt = createTitlePrompt(options);
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();

    let title = text.trim()
      .replace(/^["']|["']$/g, '') // Remove quotes
      .replace(/^Title:\s*/i, '') // Remove "Title:" prefix
      .replace(/\.$/, '') // Remove trailing period
      .trim();

    // Validate the generated title
    if (validateTitle(title)) {
      return {
        title,
        method: 'gemini',
        confidence: 0.95,
        inputType: options.inputType
      };
    } else {
      throw new Error('Invalid title generated by Gemini');
    }
  } catch (error) {
    console.error('Gemini title generation failed:', error);
    throw error;
  }
}

/**
 * Generates a fallback title using keyword extraction
 */
function generateFallbackTitle(options) {
  const { userMessage, inputType } = options;
  
  // Extract key terms from the message
  const words = userMessage
    .toLowerCase()
    .replace(/[^\w\s]/g, ' ')
    .split(/\s+/)
    .filter(word => word.length > 2);

  // Business-focused keywords get priority
  const businessKeywords = new Set([
    'business', 'marketing', 'sales', 'strategy', 'plan', 'finance', 'customer',
    'product', 'service', 'team', 'management', 'revenue', 'growth', 'analysis'
  ]);

  // Score and select best words
  const scoredWords = words.map(word => ({
    word,
    score: businessKeywords.has(word) ? 3 : 1
  })).sort((a, b) => b.score - a.score);

  // Create title from top words
  const topWords = scoredWords.slice(0, 3).map(item => 
    item.word.charAt(0).toUpperCase() + item.word.slice(1)
  );

  const title = topWords.length > 0 
    ? `${topWords.join(' ')} Discussion`
    : `${inputType === 'voice' ? 'Voice' : 'Text'} Conversation`;

  return {
    title: title.length > 50 ? title.substring(0, 47) + '...' : title,
    method: 'fallback',
    confidence: 0.6,
    inputType: options.inputType
  };
}

/**
 * Main title generation function
 */
async function generateChatTitle(options) {
  try {
    // Try Gemini first
    const result = await generateWithGemini(options);
    console.log(`‚úÖ [TITLE] Generated via Gemini: "${result.title}" (${options.inputType})`);
    return result;
  } catch (error) {
    // Fall back to keyword extraction
    console.warn(`‚ö†Ô∏è [TITLE] Gemini failed, using fallback: ${error}`);
    const fallbackResult = generateFallbackTitle(options);
    console.log(`üîÑ [TITLE] Generated via fallback: "${fallbackResult.title}" (${options.inputType})`);
    return fallbackResult;
  }
}

/**
 * Get standardized title generation options
 */
function getTitleGenerationOptions(
  userMessage, 
  assistantResponse,
  inputType = 'text'
) {
  return {
    userMessage,
    assistantResponse,
    inputType,
    maxLength: 50,
    temperature: 0.3
  };
}

module.exports = {
  generateChatTitle,
  shouldGenerateTitle,
  validateTitle,
  getTitleGenerationOptions
};